#!/bin/bash


## params : 1. $1 = volume
bb_crypter_chek() {
	if [[ -z $1 ]]; then
		bb_stat "partition not registered yet. Register partition at /etc/crypter."
		return 1
	fi
}


## params : 1. $1 = usrdir
bb_crypter_accs() {
	sudo chown -R $USER:$USER $1 &&
	sudo chmod -R 700 $1
	if [[ -d $1/lost+found ]]; then
		rm -fr $1/lost+found
	fi
}


## params : $1 = volume, $2 = mapper, $3 = usrdir
bb_crypter_udir() {

	sudo cryptsetup luksOpen /dev/$1 $2 &&
	sleep 2

	if [[ ! -d ~/.local/crypto ]]; then
		sudo mkdir ~/.local/crypto
		chown -R $USER:$USER ~/.local/crypto
	fi

	if [[ ! -d $3 ]]; then
		sudo mkdir $3
	fi
	sudo mount /dev/mapper/$2 $3 &&
	sleep 1
}


## opening line
bb_crypter_desc() {
	echo "---------------------------------------------"
	echo " $1"
	echo ""
}


## ending line
bb_crypter_stop() {
	echo ""
	echo " $1"
	echo "---------------------------------------------"
	echo ""
}


## params : $1 = usrdir, $2 = mapper
bb_crypter_umnt() {
	sudo umount $1 &&
	bb_crypter_desc "Ecnrypt crypto volume" &&
	sleep 2
	bb_stat "paritition is umounted"
	sudo cryptsetup luksClose /dev/mapper/$2 &&
	sleep 1
	bb_stat "partition is locked"
	sudo rm -fr $1
	bb_stat "user directory clean"
	bb_crypter_stop "Crypto volume encrypted"
}


## keys mounter
bb_crypter_keys() {
	volume="$crypt_keys";
	mapper="crypt_keys"
	usrdir="$HOME/.local/crypto/keys"
	valdir=("gpg" "ssh" "dbx" "ssl" "rec" "dkim")
	pather=$(pwd)

	cd $HOME &&
	bb_crypter_chek $volume &&
	bb_rbin_head "CRYPTOVAULT MANAGER" &&
	if [[ $(sudo mountpoint -qd $usrdir) ]]; then
		bb_crypter_umnt $usrdir $mapper
	else
		bb_crypter_udir $volume $mapper $usrdir &&
		bb_crypter_desc "Decrypt keys crypto volume" &&
		for dir in "${valdir[@]}"; do
			if [[ ! -d $usrdir/$dir ]]; then
				sudo mkdir $usrdir/$dir
			fi
			bb_stat "$dir directory is ready"
		done
		bb_crypter_accs $usrdir $mapper
		bb_stat "ssh directory sync"
		bb_crypter_stop "Keys crypto volume is ready"
	fi
	cd $pather
}


## hive mounter
bb_crypter_hive() {
	volume="$crypt_file"
	mapper="crypt_hive"
	usrdir="$HOME/.local/crypto/hive"
	valdir=( "certificate" "research" "blueprint" "intel")
	pather=$(pwd)

	cd $HOME &&
	bb_crypter_chek $volume &&
	bb_rbin_head "CRYPTOVAULT MANAGER" &&

	if [[ $(sudo mountpoint -qd $usrdir) ]]; then
		bb_crypter_umnt $usrdir $mapper
	else
		bb_crypter_udir $volume $mapper $usrdir &&
		bb_crypter_desc "Decrypt hive crypto volume" &&
		for dir in "${valdir[@]}"; do
			if [[ ! -d $usrdir/$dir ]]; then
				sudo mkdir $usrdir/$dir
			fi
			bb_stat "$dir directory is ready"
		done
		bb_crypter_accs $usrdir $mapper
		bb_crypter_stop "Hive crypto directory ready"
	fi
	cd $pather
}


## file mounter
bb_crypter_file() {
	volume="$crypt_file"
	mapper="crypt_file"
	usrdir="$HOME/.local/crypto/file"
	valdir=("personal" "family" "company" "friends" "organization" "working" )
	pather=$(pwd)

	cd $HOME &&
	bb_crypter_chek $volume &&
	bb_rbin_head "CRYPTOVAULT MANAGER" &&

	if [[ $(sudo mountpoint -qd $usrdir) ]]; then
		bb_crypter_umnt $usrdir $mapper
		rm -fr ~/files
	else
		bb_crypter_udir $volume $mapper $usrdir &&
		bb_crypter_desc "Decrypt file crypto volume" &&
		for dir in "${valdir[@]}"; do
			if [[ ! -d $usrdir/$dir ]]; then
				sudo mkdir $usrdir/$dir
			fi
			bb_stat "$dir directory is ready"
		done
		bb_crypter_accs $usrdir $mapper
		ln -sf $usrdir ~/files
		bb_crypter_stop "Files crypto directory ready"
	fi
	cd $pather
}


## media mounter
bb_crypter_meds() {
	volume="$crypt_meds"
	mapper="crypt_meds"
	usrdir="$HOME/.local/crypto/media"
	valdir=("audio" "video" "image")
	pather=$(pwd)

	cd $HOME &&
	bb_crypter_chek $volume &&
	bb_rbin_head "CRYPTOVAULT MANAGER" &&
	if [[ $(sudo mountpoint -qd $usrdir) ]]; then
		for dir in "${valdir[@]}"; do
			rm -f "$HOME/$dir"
		done
		sleep 2
		bb_crypter_umnt $usrdir $mapper
	else
		bb_crypter_udir $volume $mapper $usrdir &&
		bb_crypter_desc "Decrypt file crypto volume" &&
		for dir in "${valdir[@]}"; do
			if [[ ! -d $usrdir/$dir ]]; then
				sudo mkdir $usrdir/$dir
			fi
			if [[ -f "$HOME/$dir" ]]; then
				rm -f "$HOME/$dir"
			fi
			ln -fs $usrdir/$dir $HOME/$dir
			bb_stat "$dir directory is ready"
		done
		bb_crypter_accs $usrdir $mapper
		bb_crypter_stop "Media crypto directory ready"
	fi
	cd $pather
}


## development mounter
bb_crypter_devs() {
	volume="$crypt_devs"
	mapper="crypt_devs"
	usrdir="$HOME/.local/crypto/devel"
	valdir=("website" "android" "iphone" "linux" "windows" "compose")
	pather=$(pwd)

	cd $HOME &&
	bb_crypter_chek $volume &&
	bb_rbin_head "CRYPTOVAULT MANAGER" &&
	if [[ $(sudo mountpoint -qd $usrdir) ]]; then
		bb_crypter_umnt $usrdir $mapper
		rm -fr ~/devel

	else
		bb_crypter_udir $volume $mapper $usrdir &&
		bb_crypter_desc "Decrypt file crypto volume" &&
		for dir in "${valdir[@]}"; 
		do
			if [[ ! -d $usrdir/$dir ]]; then
				sudo mkdir $usrdir/$dir
			fi
			bb_stat "$dir directory is ready"
		done
		bb_crypter_accs $usrdir $mapper
		ln -sf $usrdir ~/devel
		bb_crypter_stop "File crypto directory ready"
	fi
	cd $pather
}


## vhost mounter
bb_crypter_virt() {

	volume="$crypt_virt"
	mapper="crypt_virt"
	usrdir="$HOME/.local/crypto/virt"
	valdir=("testing" "production" "proto" "yuvirt")
	pather=$(pwd)

	cd $HOME &&
	bb_crypter_chek $volume &&
	bb_rbin_head "CRYPTOVAULT MANAGER" &&
	if [[ $(sudo mountpoint -qd $usrdir) ]]; then
		bb_crypter_umnt $usrdir $mapper
		rm -fr ~/vmhost
	else
		bb_crypter_udir $volume $mapper $usrdir &&
		bb_crypter_desc "Decrypt file crypto volume" &&
		for dir in "${valdir[@]}"; do
			if [[ ! -d $usrdir/$dir ]]; then
				sudo mkdir $usrdir/$dir
			fi
			bb_stat "$dir directory is ready"
		done
		bb_crypter_accs $usrdir $mapper
		ln -fs $usrdir/yuvirt ~/vmhost
		bb_crypter_stop "File crypto directory ready"
	fi
	cd $pather
}


## podman mounter
bb_crypter_pods() {
	volume="$crypt_pods"
	echo "currently not available"
}


## docker mounter
bb_crypter_dock() {

	volume="sda7"
	mapper="crypt_cont"
	usrdir="/var/lib/docker"
	valdir=("containers" "image" "volumes")

	cd $HOME &&
	bb_crypter_chek $volume &&
	bb_rbin_head "CRYPTOVAULT MANAGER"

	if [[ $(sudo mountpoint -qd /run/media/$USER/docker/) ]]; then

		bb_crypter_desc "Ecnrypt docker crypto volume"

		if [[ ! -z  $( sudo docker ps -q ) ]];then
			sudo docker kill $(sudo docker ps -q ) > /dev/null 2>&1
			bb_stat "Terminate all docker activity"
		fi
		
		sudo systemctl stop docker > /dev/null 2>&1
		bb_stat "Disable docker service"
		sleep 1 &&

		sudo systemctl stop docker.socket > /dev/null 2>&1
		bb_stat "Disable docker socket"
		sleep 1 &&

		for dir in "${valdir[@]}"; do
			if [[ $(sudo mountpoint -qd /var/lib/docker/$dir) ]]; then
				sudo umount -R /var/lib/docker/$dir 
				sleep 1
				bb_stat "$dir docker is unmounted"
			fi
		done

		sudo umount -R /run/media/$USER/docker
		bb_stat "Umount docker volume"
		sleep 1

		sudo cryptsetup luksClose /dev/mapper/$mapper
		bb_stat "Remove docker mapper"
		sleep 1

		sudo rm -fr /run/media/$USER/docker
		bb_stat "Cleanup user space"
		bb_crypter_stop "Docker crypto volume is encrypted"

	else

		sudo cryptsetup luksOpen /dev/$volume $mapper &&
		sleep 2
		bb_crypter_desc "Decrypt file crypto volume"
		bb_stat "Encrypted volume decrypted"


		if [[ ! -d /run/media/$USER ]]; then
			sudo mkdir /run/media/$USER
			bb_stat "Docker media user created"
		fi
		sleep 1

		if [[ ! -d /run/media/$USER/docker ]]; then
			sudo mkdir /run/media/$USER/docker
			bb_stat "Docker media sub directory created"
		fi
		sleep 1

		if [[ ! $(sudo mountpoint -qd /run/media/$USER/docker) ]]; then
			sudo mount /dev/mapper/$mapper /run/media/$USER/docker
			bb_stat "Mount crypto volume to user media"
		fi

		if [[ ! -d /var/lib/docker ]]; then
			echo 'Docker directory not found, please check your docker installation'
			exit
		fi

		for dir in "${valdir[@]}"; do

			if [[ ! -d /run/media/$USER/docker/$dir ]];then
				sudo mkdir /run/media/$USER/docker/$dir
			fi

			if [[ ! $(sudo mountpoint -qd /var/lib/docker/$dir) ]]; then
				sudo mount --bind /run/media/$USER/docker/$dir /var/lib/docker/$dir
				bb_stat "$dir directory is mounted"
			else
				bb_stat "$dir directory is ready"
			fi
		done

		sudo systemctl start docker &&
		bb_stat "Docker service is ready"
		sleep 1

		bb_crypter_stop "Docker volume crypto directory ready"
	fi
}


## game mounter
bb_crypter_game() {
	volume=""
	mapper="crypt_game"
	usrdir="$HOME/.local/cryptjoy"
	valdir=("steam" "ubisoft" "epic" "ninwii" "switch" "ps2")
	pather=$(pwd)

	cd $HOME &&
	bb_crypter_chek $volume &&
	bb_rbin_head "CRYPTOVAULT MANAGER" &&
	if [[ $(sudo mountpoint -qd $usrdir) ]]; then
		bb_crypter_umnt $usrdir $mapper
	else
		bb_crypter_udir $volume $mapper $usrdir &&
		bb_crypter_desc "Decrypt file crypto volume" &&
		for dir in "${valdir[@]}"; 
		do
			if [[ ! -d $usrdir/$dir ]]; then
				sudo mkdir $usrdir/$dir
			fi
			bb_stat "$dir directory is ready"
		done
		bb_crypter_accs $usrdir $mapper
		bb_crypter_stop "File crypto directory ready"
	fi
	cd $pather
}


crypter() {

	## configuration
	source /etc/crypter

	if [[ ! -f /etc/crypter ]];then
		sudo cp -f $cfg_path/crypter /etc/
	fi

	#'nvme0n1p3'
	crypt_keys=$keys;
	crypt_hive=$hive;
	crypt_file=$file;
	crypt_meds=$media;
	crypt_devs=$devel;
	crypt_virt=$vhost;
	crypt_pods=$podman;
	crypt_dock=$docker;
	crypt_game=$game;


	if [[ "keys" == "$1" ]]; then
		bb_crypter_keys
	elif [[ "hive" == "$1" ]]; then
		bb_crypter_devs
	elif [[ "file" == "$1" ]]; then
		bb_crypter_file
	elif [[ "media" == "$1" ]]; then
		bb_crypter_meds
	elif [[ "devel" == "$1" ]]; then
		bb_crypter_devs
	elif [[ "vhost" == "$1" ]]; then
		bb_crypter_virt
	elif [[ "podman" == "$1" ]]; then
		bb_crypter_pods
	elif [[ "docker" == "$1" ]]; then
		bb_crypter_dock
	elif [[ "game" == "$1" ]]; then
		bb_crypter_game
	fi
}